const { useState, useEffect } = React;
const { createRoot } = ReactDOM;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const isElectron = typeof window !== 'undefined' && window.process && window.process.type === 'renderer';
const ipcRenderer = isElectron ? require('electron').ipcRenderer : null;

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Electron)
class ServerConnection {
    constructor() {
        this.isConnected = false;
        this.callbacks = {};
        this.ws = null;
        
        if (isElectron) {
            this.setupIPC();
        }
    }

    setupIPC() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç main –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Electron)
        ipcRenderer.on('server-message', (event, message) => {
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message);
            this.handleMessage(message);
        });

        ipcRenderer.on('server-connected', () => {
            this.isConnected = true;
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ IPC');
        });

        ipcRenderer.on('server-disconnected', () => {
            this.isConnected = false;
            console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        });

        ipcRenderer.on('server-error', (event, error) => {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            const callback = this.callbacks['error'];
            if (callback) callback({ message: error });
        });
    }

    async connect(host = 'localhost', port = 12345) {
        if (isElectron) {
            try {
                await ipcRenderer.invoke('connect-to-server', { host, port });
                this.isConnected = true;
                return true;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
                throw error;
            }
        } else {
            // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket
            return new Promise((resolve, reject) => {
                try {
                    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
                    const wsPort = 12347; // –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è WebSocket
                    this.ws = new WebSocket(`ws://${host}:${wsPort}`);
                    
                    this.ws.onopen = () => {
                        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                        this.isConnected = true;
                        resolve(true);
                    };
                    
                    this.ws.onmessage = (event) => {
                        try {
                            const message = JSON.parse(event.data);
                            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message);
                            this.handleMessage(message);
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
                        }
                    };
                    
                    this.ws.onerror = (error) => {
                        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                        this.isConnected = false;
                        const callback = this.callbacks['error'];
                        if (callback) callback({ message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' });
                        reject(error);
                    };
                    
                    this.ws.onclose = () => {
                        console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç');
                        this.isConnected = false;
                    };
                } catch (error) {
                    reject(error);
                }
            });
        }
    }

    sendMessage(message) {
        if (this.isConnected) {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', message);
            
            if (isElectron) {
                ipcRenderer.invoke('send-to-server', message);
            } else if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                this.ws.send(JSON.stringify(message));
            }
        } else {
            console.error('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
    }

    handleMessage(message) {
        const callback = this.callbacks[message.type];
        if (callback) {
            callback(message);
        }
    }

    on(messageType, callback) {
        this.callbacks[messageType] = callback;
    }

    disconnect() {
        if (isElectron) {
            ipcRenderer.invoke('disconnect-from-server');
        } else if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.isConnected = false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const serverConnection = new ServerConnection();

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function App() {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [userInfo, setUserInfo] = useState(null);

    useEffect(() => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        serverConnection.on('login_success', (message) => {
            console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', message);
            setUserInfo({
                username: message.username,
                isAdmin: message.is_admin
            });
            setIsLoggedIn(true);
        });

        serverConnection.on('error', (message) => {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message);
            alert(message.message);
        });

        serverConnection.on('register_success', (message) => {
            alert(message.message);
        });

        return () => {
            serverConnection.disconnect();
        };
    }, []);

    return React.createElement('div', {
        className: 'app-container'
    }, [
        React.createElement(TitleBar, { key: 'titlebar' }),
        React.createElement(MainContent, { key: 'content' }, [
            !isLoggedIn ?
                React.createElement(LoginScreen, {
                    key: 'login',
                    onLogin: setUserInfo,
                    setLoggedIn: setIsLoggedIn
                }) :
                React.createElement(ChatScreen, {
                    key: 'chat',
                    userInfo: userInfo,
                    onLogout: () => {
                        setIsLoggedIn(false);
                        setUserInfo(null);
                        serverConnection.disconnect();
                    }
                })
        ])
    ]);
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Electron)
function TitleBar() {
    const handleClose = () => {
        if (isElectron) {
            ipcRenderer.invoke('close-window');
        } else {
            window.close();
        }
    };

    const handleMinimize = () => {
        if (isElectron) {
            ipcRenderer.invoke('minimize-window');
        }
    };

    return React.createElement('div', {
        style: {
            height: '32px',
            background: '#2d2d30',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            padding: '0 16px',
            borderBottom: '1px solid #484848',
            WebkitAppRegion: isElectron ? 'drag' : 'initial'
        }
    }, [
        React.createElement('div', {
            key: 'title',
            style: {
                fontSize: '12px',
                fontWeight: '600',
                color: '#cccccc'
            }
        }, 'üé§ VoiceChat Pro v1.0.0'),

        isElectron ? React.createElement('div', {
            key: 'controls',
            style: {
                display: 'flex',
                gap: '8px',
                WebkitAppRegion: 'no-drag'
            }
        }, [
            React.createElement('button', {
                key: 'close',
                onClick: handleClose,
                style: {
                    width: '12px',
                    height: '12px',
                    borderRadius: '50%',
                    border: 'none',
                    background: '#ff5f56',
                    cursor: 'pointer'
                }
            }),
            React.createElement('button', {
                key: 'minimize',
                onClick: handleMinimize,
                style: {
                    width: '12px',
                    height: '12px',
                    borderRadius: '50%',
                    border: 'none',
                    background: '#ffbd2e',
                    cursor: 'pointer'
                }
            })
        ]) : null
    ]);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
function MainContent({ children }) {
    return React.createElement('div', {
        style: {
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden'
        }
    }, children);
}

// –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ —Å –†–ï–ê–õ–¨–ù–û–ô –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
function LoginScreen({ onLogin, setLoggedIn }) {
    const [formData, setFormData] = useState({
        server: 'localhost',
        username: '',
        password: ''
    });
    const [status, setStatus] = useState('‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    const [isConnecting, setIsConnecting] = useState(false);

    const handleInputChange = (field, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleConnect = async () => {
        // –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–õ–Ø!
        if (!formData.username.trim()) {
            setStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        if (!formData.password.trim()) {
            setStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
            return;
        }

        setIsConnecting(true);
        setStatus('‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');

        try {
            await serverConnection.connect(formData.server, 12345);
            setStatus('‚è≥ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –†–ï–ê–õ–¨–ù–´–ô —Å–µ—Ä–≤–µ—Ä
            serverConnection.sendMessage({
                type: 'login',
                username: formData.username,
                password: formData.password
            });

        } catch (error) {
            setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            setIsConnecting(false);
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        }
    };

    const handleRegister = async () => {
        if (!formData.username.trim() || !formData.password.trim()) {
            setStatus('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            return;
        }

        setStatus('‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

        try {
            await serverConnection.connect(formData.server, 12345);
            serverConnection.sendMessage({
                type: 'register',
                username: formData.username,
                password: formData.password
            });
        } catch (error) {
            setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            console.error('–û—à–∏–±–∫–∞:', error);
        }
    };

    return React.createElement('div', {
        style: {
            width: '100%',
            height: '100%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d30 100%)'
        }
    },
        React.createElement('div', {
            className: 'card',
            style: { minWidth: '400px' }
        }, [
            React.createElement('h1', {
                key: 'title',
                className: 'title'
            }, 'üé§ VoiceChat Pro'),

            React.createElement('p', {
                key: 'subtitle',
                className: 'subtitle'
            }, '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç'),

            // –ü–æ–ª–µ —Å–µ—Ä–≤–µ—Ä–∞
            React.createElement('div', {
                key: 'server-field',
                style: { marginBottom: '20px' }
            }, [
                React.createElement('label', {
                    key: 'server-label',
                    style: {
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: '600',
                        color: '#ffffff'
                    }
                }, 'üåê –°–µ—Ä–≤–µ—Ä'),
                React.createElement('input', {
                    key: 'server-input',
                    className: 'input',
                    type: 'text',
                    value: formData.server,
                    onChange: (e) => handleInputChange('server', e.target.value),
                    placeholder: 'localhost',
                    disabled: isConnecting
                })
            ]),

            // –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            React.createElement('div', {
                key: 'username-field',
                style: { marginBottom: '20px' }
            }, [
                React.createElement('label', {
                    key: 'username-label',
                    style: {
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: '600',
                        color: '#ffffff'
                    }
                }, 'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                React.createElement('input', {
                    key: 'username-input',
                    className: 'input',
                    type: 'text',
                    value: formData.username,
                    onChange: (e) => handleInputChange('username', e.target.value),
                    placeholder: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    disabled: isConnecting
                })
            ]),

            // –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
            React.createElement('div', {
                key: 'password-field',
                style: { marginBottom: '20px' }
            }, [
                React.createElement('label', {
                    key: 'password-label',
                    style: {
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: '600',
                        color: '#ffffff'
                    }
                }, 'üîí –ü–∞—Ä–æ–ª—å'),
                React.createElement('input', {
                    key: 'password-input',
                    className: 'input',
                    type: 'password',
                    value: formData.password,
                    onChange: (e) => handleInputChange('password', e.target.value),
                    placeholder: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                    disabled: isConnecting
                })
            ]),

            // –ö–Ω–æ–ø–∫–∏
            React.createElement('div', {
                key: 'buttons',
                style: {
                    display: 'flex',
                    gap: '12px',
                    marginBottom: '20px'
                }
            }, [
                React.createElement('button', {
                    key: 'login-button',
                    className: 'button-primary',
                    onClick: handleConnect,
                    disabled: isConnecting,
                    style: { flex: 1 }
                }, 'üöÄ –í–æ–π—Ç–∏'),
                React.createElement('button', {
                    key: 'register-button',
                    className: 'button-secondary',
                    onClick: handleRegister,
                    disabled: isConnecting,
                    style: { flex: 1 }
                }, 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
            ]),

            // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            React.createElement('div', {
                key: 'status',
                className: 'status-bar',
                style: {
                    padding: '12px',
                    borderRadius: '8px',
                    background: '#2d2d30',
                    color: '#cccccc',
                    fontSize: '14px',
                    textAlign: 'center'
                }
            }, status)
        ])
    );
}

// –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
function ChatScreen({ userInfo, onLogout }) {
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [currentRoom, setCurrentRoom] = useState('general');

    useEffect(() => {
        serverConnection.on('chat_message', (message) => {
            setMessages(prev => [...prev, message]);
        });

        serverConnection.on('user_joined', (message) => {
            setMessages(prev => [...prev, {
                type: 'system',
                message: `${message.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`
            }]);
        });

        serverConnection.on('user_left', (message) => {
            setMessages(prev => [...prev, {
                type: 'system',
                message: `${message.username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`
            }]);
        });
    }, []);

    const handleSendMessage = () => {
        if (!inputMessage.trim()) return;

        serverConnection.sendMessage({
            type: 'chat',
            message: inputMessage,
            room: currentRoom
        });

        setInputMessage('');
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    };

    return React.createElement('div', {
        style: {
            display: 'flex',
            flexDirection: 'column',
            height: '100%',
            background: '#1a1a1a'
        }
    }, [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        React.createElement('div', {
            key: 'chat-header',
            style: {
                padding: '16px',
                background: '#2d2d30',
                borderBottom: '1px solid #484848',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
            }
        }, [
            React.createElement('div', {
                key: 'user-info',
                style: {
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px'
                }
            }, [
                React.createElement('span', {
                    key: 'username',
                    style: {
                        fontSize: '16px',
                        fontWeight: '600',
                        color: '#ffffff'
                    }
                }, `üë§ ${userInfo.username}`),
                userInfo.isAdmin && React.createElement('span', {
                    key: 'admin-badge',
                    style: {
                        padding: '4px 8px',
                        background: '#0078d4',
                        borderRadius: '4px',
                        fontSize: '12px',
                        color: '#ffffff'
                    }
                }, '‚≠ê ADMIN')
            ]),
            React.createElement('button', {
                key: 'logout-button',
                className: 'button-secondary',
                onClick: onLogout,
                style: {
                    padding: '8px 16px'
                }
            }, 'üö™ –í—ã—Ö–æ–¥')
        ]),

        // –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        React.createElement('div', {
            key: 'messages-area',
            style: {
                flex: 1,
                overflowY: 'auto',
                padding: '16px'
            }
        }, messages.map((msg, index) =>
            React.createElement('div', {
                key: index,
                style: {
                    marginBottom: '12px',
                    padding: '12px',
                    background: msg.type === 'system' ? '#2d2d30' : '#3c3c3c',
                    borderRadius: '8px',
                    borderLeft: msg.type === 'system' ? '3px solid #0078d4' : 'none'
                }
            }, [
                msg.username && React.createElement('div', {
                    key: 'username',
                    style: {
                        fontSize: '12px',
                        fontWeight: '600',
                        color: '#0078d4',
                        marginBottom: '4px'
                    }
                }, msg.username),
                React.createElement('div', {
                    key: 'message',
                    style: {
                        fontSize: '14px',
                        color: '#ffffff'
                    }
                }, msg.message),
                msg.timestamp && React.createElement('div', {
                    key: 'timestamp',
                    style: {
                        fontSize: '10px',
                        color: '#888',
                        marginTop: '4px'
                    }
                }, msg.timestamp)
            ])
        )),

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        React.createElement('div', {
            key: 'input-area',
            style: {
                padding: '16px',
                background: '#2d2d30',
                borderTop: '1px solid #484848',
                display: 'flex',
                gap: '12px'
            }
        }, [
            React.createElement('input', {
                key: 'message-input',
                className: 'input',
                type: 'text',
                value: inputMessage,
                onChange: (e) => setInputMessage(e.target.value),
                onKeyPress: handleKeyPress,
                placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                style: {
                    flex: 1
                }
            }),
            React.createElement('button', {
                key: 'send-button',
                className: 'button-primary',
                onClick: handleSendMessage
            }, 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å')
        ])
    ]);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const root = createRoot(document.getElementById('app'));
root.render(React.createElement(App));
