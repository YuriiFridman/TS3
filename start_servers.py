#!/usr/bin/env python3
"""
Unified Server Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import subprocess
import sys
import time
import signal
import logging
from threading import Thread

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class ServerLauncher:
    def __init__(self):
        self.processes = []
    
    def start_server(self, script, name):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            logging.info(f"–ó–∞–ø—É—Å–∫ {name}...")
            process = subprocess.Popen([sys.executable, script])
            self.processes.append((name, process))
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            return process
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return None
    
    def stop_all(self, signum=None, frame=None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logging.info("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        for name, process in self.processes:
            try:
                logging.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                process.wait(timeout=5)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
                try:
                    process.kill()
                except:
                    pass
        sys.exit(0)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        signal.signal(signal.SIGINT, self.stop_all)
        signal.signal(signal.SIGTERM, self.stop_all)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
        self.start_server('server.py', 'TCP Server')
        self.start_server('websocket_bridge.py', 'WebSocket Bridge')
        self.start_server('http_server.py', 'HTTP Server')
        
        logging.info("\n" + "="*60)
        logging.info("–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        logging.info("="*60)
        logging.info("üì± Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start")
        logging.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8080")
        logging.info("üîå TCP Server: localhost:12345")
        logging.info("üîå WebSocket Bridge: localhost:12347")
        logging.info("="*60)
        logging.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while True:
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª –ª–∏ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å
                for name, process in self.processes:
                    if process.poll() is not None:
                        logging.error(f"{name} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                        self.stop_all()
        except KeyboardInterrupt:
            self.stop_all()

if __name__ == "__main__":
    launcher = ServerLauncher()
    launcher.run()
